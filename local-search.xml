<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法复健计划——构造题专栏</title>
    <link href="/2023/09/30/algo-contrustive/"/>
    <url>/2023/09/30/algo-contrustive/</url>
    
    <content type="html"><![CDATA[<p>第一篇博客就献给算法题解了，根据<a href="https://www.zhihu.com/question/353734418">知乎上大佬的说法</a>，可以先做构造题，提升自己的思维水平，我这里也就先从构造题入手，慢慢恢复自己的做题能力。那么就开始吧！</p><h2 id="cf-round-629D-1328D-2023-9-30"><a href="#cf-round-629D-1328D-2023-9-30" class="headerlink" title="cf round 629D (1328D) 2023&#x2F;9&#x2F;30"></a><a href="https://codeforces.com/problemset/problem/1328/D">cf round 629D (1328D)</a> 2023&#x2F;9&#x2F;30</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题意还是比较简单的，n个动物排成一圈，需要给每个动物染色。要求：相邻的不同动物染成不同的颜色，同种动物没有要求。</p><p>问：给出最少所需颜色数量和对应的染色方式。</p><p>数量级：动物个数为n（$3 \leq n \leq 2 \cdot 10^5$），种数为k（$1 \leq k \leq 2 \cdot 10^5$）。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>可以从所需颜色数量（记为m）入手考虑，可以发现最多需要三种颜色（每个动物只有两个相邻的动物，如果两个动物颜色不同，中间这只染成第三种颜色就行）。</p><p>此时就可以分别讨论满足m&#x3D;1，m&#x3D;2，m&#x3D;3的情况：</p><ol><li><p>m&#x3D;1：显然，只有一种动物的话，才能这样；</p></li><li><p>m&#x3D;2：</p><p> 2.1：n是偶数：那么1212…12这样染色就行（泛化性更强结论的可以参见<a href="https://oi-wiki.org/graph/color/">图的着色</a>）；</p><p> 2.2：n是奇数，但是有连续的动物是同一种类：如果还是1212这样染，最后一个动物和第一个动物的颜色都会是1，不可以。但连续同种动物给了一些操作空间，可以把任意一对相邻同种动物染成同样颜色，那么最后一个动物就可以是颜色2，不与第一个动重复了；</p></li><li><p>m&#x3D;3：也就是n是奇数，且相邻动物种类均不同，那只能多加一个颜色，像1212…123这样构造了。</p></li></ol><h3 id="代码（核心部分）"><a href="#代码（核心部分）" class="headerlink" title="代码（核心部分）"></a>代码（核心部分）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a[<span class="hljs-number">200005</span>];<br>queue&lt;<span class="hljs-type">int</span>&gt; ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_ans</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num);<br>    <span class="hljs-keyword">while</span>(!ans.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>,ans.<span class="hljs-built_in">front</span>(),ans.<span class="hljs-built_in">size</span>()==<span class="hljs-number">1</span>?<span class="hljs-string">&#x27;\n&#x27;</span>:<span class="hljs-string">&#x27; &#x27;</span>);<br>        ans.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    &#125;<br>    <span class="hljs-comment">// 1</span><br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]!=a[i<span class="hljs-number">-1</span>])&#123;<br>            flag=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            ans.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">print_ans</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 2</span><br>    flag=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]==a[(i+<span class="hljs-number">1</span>)%n])&#123;<br>            flag=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            ans.<span class="hljs-built_in">push</span>((i%<span class="hljs-number">2</span>)+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">print_ans</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flag!=<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-type">int</span> tmp[n]=&#123;<span class="hljs-number">0</span>&#125;;<br>        tmp[(flag+n)%n]=<span class="hljs-number">1</span>;<br>        tmp[(flag+<span class="hljs-number">1</span>+n)%n]=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> now=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;n;i++)&#123;<br>            now^=<span class="hljs-number">1</span>;<br>            tmp[(flag+i)%n]=now+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            ans.<span class="hljs-built_in">push</span>(tmp[i]);<br>        &#125;<br>        <span class="hljs-built_in">print_ans</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 3</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        ans.<span class="hljs-built_in">push</span>(i%<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    &#125;<br>    ans.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">print_ans</span>(<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>这道题是div3的D，其实挺简单的，但一开始想的时候还是走错了路，最后看了题解，wa了几次才做对的。这里简单复盘一下：</p><h4 id="前期思考"><a href="#前期思考" class="headerlink" title="前期思考"></a>前期思考</h4><p>自己一开始想的时候，发现了了可以想象成一个graph然后进行着色。但关键是，没有意识到最多只需要三种颜色，所以打算用dp的思路。</p><p>后期发现了这一点，但还是走在dp的道路上一去不复返了。在写状态转移的过程中，发现倒推染色构造方式有些麻烦，觉得dp应该不是正解，所以去看题解了。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>实现的时候wa了几发，原因如下：</p><ol><li><p>在m&#x3D;3时，没有多想，觉得12312312…这样的构造方式可以解决所有问题。但是问题就出在第n个动物和第1个动物的关系上，事实上，多一种颜色就是为了解决这个问题，正确的构造方式为1212…123；</p></li><li><p>代码没有考虑到第1个动物和第n个动物颜色相同，导致满足m&#x3D;2的情况；</p></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>很久没有写题了，思维方面，想出一个div3 D也磕磕绊绊的；相应的，写作方面，第一次写题解，行文逻辑和简约程度都有待优化。但不管怎么说，也算一个开始了，还是要继续努力呀！</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术沉淀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>又双叒叕想要尝试写一些东西了</title>
    <link href="/2023/09/26/0-start/"/>
    <url>/2023/09/26/0-start/</url>
    
    <content type="html"><![CDATA[<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>一直想搞一个个人博客，在上面写点和技术、生活有关的东西，一来当一个日记&#x2F;笔记本，进行一些复盘和沉淀，二来也能练练文笔，提升一下表达能力。但因为自己太懒，在此之前也只是停留在口头上。</p><p>近期受到前老板和朋友们的影响，觉得可以开始着手做一下这件事了。希望在未来能养成习惯，每1~2天，最差每周抽出1~2个小时，把这周的经历和思考进行一个总结和复盘，也算是为来时的路留下印记，避免迷失了方向吧。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>至于博客的内容，目前想着写以下几类：</p><h3 id="1-技术沉淀"><a href="#1-技术沉淀" class="headerlink" title="1. 技术沉淀"></a>1. 技术沉淀</h3><p>这个不用多说，相信不少和我一样的码农创建个人博客的目的都是这个。对我而言，我想把我的技术沉淀分为以下三个小类：</p><ol><li><strong>算法题解</strong>：即codeforce、leetcode等算法竞赛网站中有意思的题的题解。写这个有两点原因，第一个是这个作为博客内容好上手，第二个是想总结一些技巧与思路，锻炼思维，顺便方便秋招。</li><li><strong>论文笔记</strong>：这个也不用多说，看过的论文整体思路与框架，还有给自己留下的一些灵感和疑惑，都可以记录下来。</li><li><strong>项目总结</strong>：做过 &#x2F; 看过的项目或计算机书籍中，大致的流程思想也应该总结一下，方便日后回顾，就像给代码写注释一样。重点总结实习过程中的内容。</li></ol><h3 id="2-读书笔记"><a href="#2-读书笔记" class="headerlink" title="2. 读书笔记"></a>2. 读书笔记</h3><p>本科期间很少读书，读研的时候意识到了这一点，想着要再次养成读书的习惯。但前几天看书的时候，有一本书看到一半，惊觉自己早就看过了，却在心里没留下什么印象，因此计划在读书的同时，做做读书笔记。目前想读的书主要有以下几类：</p><ol><li><strong>个人成长</strong>：计划先从美团“四大名著”入手：《高效能人士的七个习惯》《金字塔原理》《学会提问》《用图表说话》（排名分先后），也会看看毛选。</li><li><strong>心理学与社会学</strong>：可能是除计算机之外，我最喜欢的两个学科了，最近想看《心理学与生活》《发展心理学》《被讨厌的勇气》《心流》《置身事内》。</li><li><strong>小说历史</strong>：看不进去工具书、不想学习的时候看看，了解一下别人的经历或思考，增加自己人生的宽度。</li><li><strong>其他</strong>：比如《写作是门手艺》《文学回忆录》之类的。</li></ol><h3 id="3-生活随笔"><a href="#3-生活随笔" class="headerlink" title="3. 生活随笔"></a>3. 生活随笔</h3><p>这个就比较随便了，可能包括自己的经历、思考，与他人的聊天之类的，记录一下生活的点点滴滴。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/26/hello-world/"/>
    <url>/2023/09/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
